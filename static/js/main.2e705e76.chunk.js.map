{"version":3,"sources":["redux/types.js","redux/posts/postsReducers.js","redux/reducers.js","redux/actions.js","redux/posts/postsActions.js","redux/posts/postsSagas.js","redux/sagas.js","redux/store.js","useDispatchPromise.js","index.js","App.js"],"names":["InitialState","data","status","posts","state","action","console","log","type","t","loading","error","payload","all","retrieveRequest","retrieveFinally","retrievePosts","resolve","reject","delay","call","fetch","response","json","toast","success","put","actions","takeLatest","rootSaga","postsSagas","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","reducers","composeWithDevTools","applyMiddleware","run","useDispatchPromise","dispatch","useDispatch","props","Promise","configure","ReactDOM","render","useSelector","useState","showButton","setShowButton","className","onClick","_e","then","length","disabled","map","post","key","id","title","body","document","getElementById"],"mappings":"0RAAe,EACc,4BADd,EAEc,4BCAvBA,EAAe,CACnBC,KAAM,GACNC,OAAQ,MCFK,GACbC,MDIoB,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAGtD,OAFAC,QAAQC,IAAI,OAAQF,EAAOG,MAEnBH,EAAOG,MACb,KAAKC,EACH,OAAO,eACFL,EADL,CAEEH,KAAM,GACNS,SAAS,EACTC,MAAO,OAGX,KAAKF,EACH,OAAO,eACFL,EADL,CAEEH,KAAMI,EAAOO,QACbF,SAAS,EACTC,MAAON,EAAOM,QAGlB,QACE,OAAOP,K,yCE1BE,GACbD,MCca,CACbU,IAAK,CACHC,gBAjBwB,WAC1B,MAAO,CACLN,KAAMC,EACNG,QAAS,OAeTG,gBAXwB,SAACd,EAAMU,GACjC,MAAO,CACLH,KAAMC,EACNG,QAASX,EACTU,MAAOA,O,WCRDK,GAAV,SAAUA,EAAV,kFAKI,OALsBC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,OAE7BjB,EAAO,GACPU,EAAQ,KAHd,kBAKUQ,YAAM,KALhB,OAOqB,OAPrB,SAO2BC,YACrBC,MACA,8CATN,OAWW,OAJDC,EAPV,iBAWiBA,EAASC,OAX1B,QAWItB,EAXJ,OAYIuB,IAAMC,QAAQ,0BAEdR,EAAQhB,GAdZ,kDAgBIU,EAAK,KACLa,IAAMb,MAAM,wBAEZO,EAAO,EAAD,IAnBV,QAuBI,OAvBJ,oBAuBUQ,YAAIC,EAAQxB,MAAMU,IAAIE,gBAAgBd,EAAMU,IAvBtD,wFA2Be,OACbiB,YAAWnB,EAA6BO,I,WC7BjBa,GAAV,SAAUA,IAAV,iEACb,OADa,SACPhB,YAAI,YAAIiB,IADD,uCCGf,IAAMC,EAAiBC,cAEjBC,EAAQC,sBACZC,0BAAgBC,GAChBC,8BAAoBC,0BAAgBP,KAGtCA,EAAeQ,IAAIV,GAEJI,Q,gBCHAO,MAXf,WACE,IAAMC,EAAWC,cAOjB,OANqB,SAAAC,GACnB,OAAO,IAAIC,SAAQ,SAAC3B,EAASC,GAC3BuB,EAAS,eAAKE,EAAN,CAAa1B,UAASC,iB,MCIpCM,IAAMqB,YAENC,IAASC,OACP,kBAAC,IAAD,CAAUd,MAAOA,GACf,mBCTW,WACb,IAAMQ,EAAWD,IACXrC,EAAQ6C,aAAY,SAAA5C,GAAK,OAAIA,EAAMD,MAAMF,QACzCS,EAAUsC,aAAY,SAAA5C,GAAK,OAAIA,EAAMD,MAAMO,WAHrB,EAIQuC,oBAAS,GAJjB,mBAIrBC,EAJqB,KAITC,EAJS,KAc5B,OACE,yBAAKC,UAAU,OACZF,GACC,4BAAQG,QAXM,SAAAC,GAClBb,EAASd,EAAQxB,MAAMU,IAAIC,mBAAmByC,MAAK,SAAAtD,GAEjDK,QAAQC,IAAI,SAAUN,EAAKuD,OAAQ,SACnCL,GAAc,OAOkBM,SAAU/C,GACrCA,EAAU,aAAe,kBAI7BP,EAAMuD,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,IACZ,yBAAKT,UAAU,SAASO,EAAKG,OAC7B,uBAAGV,UAAU,QAAQO,EAAKI,aDhBhC,OAEFC,SAASC,eAAe,W","file":"static/js/main.2e705e76.chunk.js","sourcesContent":["export default {\n  POST_ALL_RETRIEVE_REQUEST: \"POST_ALL_RETRIEVE_REQUEST\",\n  POST_ALL_RETRIEVE_FINALLY: \"POST_ALL_RETRIEVE_FINALLY\"\n};\n","import t from \"../types\";\n\nconst InitialState = {\n  data: [],\n  status: null\n};\n\nconst postsReducers = (state = InitialState, action) => {\n  console.log(\"Type\", action.type);\n\n  switch (action.type) {\n    case t.POST_ALL_RETRIEVE_REQUEST: {\n      return {\n        ...state,\n        data: [],\n        loading: true,\n        error: null\n      };\n    }\n    case t.POST_ALL_RETRIEVE_FINALLY: {\n      return {\n        ...state,\n        data: action.payload,\n        loading: false,\n        error: action.error\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default postsReducers","import postsReducers from './posts/postsReducers'\n\nexport default {\n  posts: postsReducers\n};\n","import postsActions from './posts/postsActions'\n\nexport default {\n  posts: postsActions\n};\n","import t from \"../types\";\n\nconst postRetrieveRequest = () => {\n  return {\n    type: t.POST_ALL_RETRIEVE_REQUEST,\n    payload: null\n  };\n};\n\nconst postRetireveFinally = (data, error) => {\n  return {\n    type: t.POST_ALL_RETRIEVE_FINALLY,\n    payload: data,\n    error: error\n  };\n};\n\nexport default {\n  all: {\n    retrieveRequest: postRetrieveRequest,\n    retrieveFinally: postRetireveFinally\n  }\n}\n","import { takeLatest, call, put, delay } from \"redux-saga/effects\";\nimport { toast } from \"react-toastify\";\nimport t from \"../types\";\nimport actions from \"../actions\";\n\nfunction* retrievePosts({ resolve, reject }) {\n  // after wrapped, I get the resolve and reject by arguments..\n  let data = [];\n  let error = null;\n  try {\n    yield delay(1000) // just for this example... to see the 'loading' status\n\n    const response = yield call(\n      fetch,\n      \"https://jsonplaceholder.typicode.com/posts\"\n    );\n    data = yield response.json();\n    toast.success(\"Success Notification !\");\n    // ...and call the resolve here\n    resolve(data);\n  } catch (err) {\n    error = err;\n    toast.error(\"Error Notification !\");\n    // ...and call the reject here\n    reject(err);\n  } finally {\n    // instead creating two actions (success and failure)\n    // I just create one, and pass some information\n    yield put(actions.posts.all.retrieveFinally(data, error));\n  }\n}\n\nexport default [\n  takeLatest(t.POST_ALL_RETRIEVE_REQUEST, retrievePosts)\n]","import { all } from \"redux-saga/effects\";\n\nimport postsSagas from './posts/postsSagas'\n\nexport default function* rootSaga() {\n  yield all([...postsSagas]);\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducers from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  combineReducers(reducers),\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import { useDispatch } from \"react-redux\";\n\nfunction useDispatchPromise() {\n  const dispatch = useDispatch();\n  const callDispatch = props => {\n    return new Promise((resolve, reject) => {\n      dispatch({ ...props, resolve, reject });\n    });\n  };\n\n  return callDispatch;\n}\n\nexport default useDispatchPromise;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport App from \"./App\";\n\nimport './style.css';\n\ntoast.configure();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useDispatchPromise from \"./useDispatchPromise\";\nimport actions from \"./redux/actions\";\n\nexport default function App() {\n  const dispatch = useDispatchPromise(); // I wrapped the dispatch in a promise\n  const posts = useSelector(state => state.posts.data);\n  const loading = useSelector(state => state.posts.loading);\n  const [showButton, setShowButton] = useState(true);\n\n  const handleClick = _e => {\n    dispatch(actions.posts.all.retrieveRequest()).then(data => {\n      // do something..\n      console.log(\"Loaded\", data.length, \"posts\");\n      setShowButton(false);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      {showButton && (\n        <button onClick={handleClick} disabled={loading}>\n          {loading ? 'loading...' : 'Retrieve Posts'}\n        </button>\n      )}\n\n      {posts.map(post => (\n        <li key={post.id}>\n          <div className=\"title\">{post.title}</div>\n          <p className=\"body\">{post.body}</p>\n        </li>\n      ))}\n    </div>\n  );\n}\n"],"sourceRoot":""}